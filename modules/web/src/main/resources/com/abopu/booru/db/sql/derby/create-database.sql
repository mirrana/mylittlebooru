CREATE TABLE TAG_CATEGORIES (
  ID                       INT GENERATED ALWAYS AS IDENTITY,
  TAG_CATEGORY_NAME        VARCHAR(255) NOT NULL,
  TAG_CATEGORY_DESCRIPTION VARCHAR(255),
  CONSTRAINT PK_TAG_CATEGORIES PRIMARY KEY (ID),
  CONSTRAINT U_TAG_CATEGORIES UNIQUE (TAG_CATEGORY_NAME)
);

INSERT INTO TAG_CATEGORIES (TAG_CATEGORY_NAME, TAG_CATEGORY_DESCRIPTION) VALUES ('Artist', '');
INSERT INTO TAG_CATEGORIES (TAG_CATEGORY_NAME, TAG_CATEGORY_DESCRIPTION) VALUES ('Character', '');
INSERT INTO TAG_CATEGORIES (TAG_CATEGORY_NAME, TAG_CATEGORY_DESCRIPTION) VALUES ('Copyright', '');
INSERT INTO TAG_CATEGORIES (TAG_CATEGORY_NAME, TAG_CATEGORY_DESCRIPTION) VALUES ('General', '');

CREATE TABLE FILES (
  ID          INT                            GENERATED ALWAYS AS IDENTITY,
  FILE_PATH   VARCHAR(255)          NOT NULL, -- Relative
  FILE_SIZE   INT                   NOT NULL,
  FILE_HASH   CHAR(32) FOR BIT DATA NOT NULL,
  MIME_TYPE   VARCHAR(30)           NOT NULL,
  WIDTH       INT                   NOT NULL,
  HEIGHT      INT                   NOT NULL,
  DESCRIPTION VARCHAR(255),
  RATING      CHAR(1)               NOT NULL DEFAULT 'q',
  SCORE       INT,
  SOURCE      VARCHAR(255),
  DATE_ADDED  TIMESTAMP             NOT NULL,
  CONSTRAINT PK_FILES PRIMARY KEY (ID),
  CONSTRAINT U_FILES_FILE_PATH UNIQUE (FILE_PATH),
  CONSTRAINT CK_FILES_FILE_SIZE CHECK (FILE_SIZE > 0),
  CONSTRAINT CK_FILES_WIDTH CHECK (WIDTH IS NULL OR WIDTH > 0),
  CONSTRAINT CK_FILES_HEIGHT CHECK (HEIGHT IS NULL OR HEIGHT > 0),
  CONSTRAINT CK_FILES_RATING CHECK (RATING IN ('s', 'q', 'e')),
  CONSTRAINT CK_FILES_SCORE CHECK (SCORE IS NULL OR (SCORE > 0 AND SCORE <= 10))
);

-- CREATE TRIGGER FILES_UPDATE_TAG_COUNT
-- AFTER INSERT ON FILES
-- FOR EACH ROW MODE DB2SQL
-- ;

CREATE TABLE TAGS (
  ID              INT GENERATED ALWAYS AS IDENTITY,
  TAG_NAME        VARCHAR(255) NOT NULL,
  TAG_DESCRIPTION VARCHAR(255),
  TAG_CATEGORY    INT          NOT NULL,
  CONSTRAINT PK_TAGS PRIMARY KEY (ID),
  CONSTRAINT FK_TAGS_TAG_CATEGORIES FOREIGN KEY (TAG_CATEGORY) REFERENCES TAG_CATEGORIES (ID),
  CONSTRAINT U_TAGS UNIQUE (TAG_NAME, TAG_CATEGORY)
);

CREATE TABLE FILE_TAGS (
  FILE_ID INT NOT NULL,
  TAG_ID  INT NOT NULL,
  CONSTRAINT PK_FILE_TAGS PRIMARY KEY (FILE_ID, TAG_ID),
  CONSTRAINT FK_FILE_TAGS_FILES FOREIGN KEY (FILE_ID) REFERENCES FILES (ID),
  CONSTRAINT FK_FILE_TAGS_TAGS FOREIGN KEY (TAG_ID) REFERENCES TAGS (ID)
);

CREATE TABLE TAG_ALIASES (
  ID INT GENERATED ALWAYS AS IDENTITY,
  TAG_ID INT NOT NULL,
  ALIAS_NAME VARCHAR(255) NOT NULL,
  CONSTRAINT PK_TAG_ALIASES PRIMARY KEY (ID),
  CONSTRAINT FK_TAG_ALIASES_TAGS FOREIGN KEY (TAG_ID) REFERENCES TAGS (ID)
);